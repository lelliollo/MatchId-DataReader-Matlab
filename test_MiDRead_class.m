clear all
close all
clc
warning on
%Script to test the matchId reader class. - A. Lavatelli - 2018

%% Read csv dir (choose the dataset you want to test)
%Dataset g1 contains nice DIC data
% dirlist=dir('test_data_g1\*.csv');

%Dataset g2 contains bad DIC data with lots of missing points
dirlist=dir('test_data_g2\*.csv');

%Cast CSV file names to a cell array of strings
Nf=size(dirlist,1);
for i=1:Nf
   DicFiles{i}=strcat(dirlist(i).folder,'\',dirlist(i).name); 
end

%%  Create class instance and test the read single file function
%create class instance with a single file name and its handle
MiDReadHandle=MatchIDdataReader(DicFiles{1});
%For people who do not know (or they don't want to know) the principles of
%OOP (object oriented programming) the "functions" (speaking in imperative
%manner) are "stored" inside a class handle (here the variable
%MiDReadHandle). So you can further call and use all the class methods (aka
%functions) by referencing to the class handle.

%The way the class operates depends on setting certain properties.. 
%this is done for instance here by telling the class what it should expect
%to be a NaN string in the csv file. In this example, this is necessary
%beacuse the files are generated by MatchID on a computer having Italian
%regional settings, so 'Not a number' becomes 'Non un numero reale'. In any
%case this step is not mandatory, since when you create the class instance
%a constructor is called. This constructor detects the regional setting of
%your Windows system and applies them to the new class instance. Then you
%can customize everything. If you are working on MatchId files generated on
%your computer, then you don't need to do anything, since the class autosetups.
MiDReadHandle.SetNaNString('Non un numero reale');
%read data (and return missing data points if any)
[DicDataSingle,misdata]=MiDReadHandle.ReadData();
%plot
figure
subplot(1,2,1)
imagesc(DicDataSingle)
title('DIC single data matrix')
subplot(1,2,2)
spy(misdata)
title('Missing points in CSV file')
%% Read data from a file list
%tell the class to use a list of files. So it is possible to read multiple
%data
MiDReadHandle.SetFileName(DicFiles);
%read multiple data (and return missing data points if any)
[DicDataMult,mult_miss_data]=MiDReadHandle.ReadMultipleData();
%plot them
figure
for i=1:Nf
   subplot(1,Nf,i)
   imagesc(DicDataMult(:,:,i))
   axis equal
end
%plot missing points
figure
for i=1:Nf
   subplot(1,Nf,i)
   spy(mult_miss_data(:,:,i))
   title({'Missing data file',num2str(i)})
   axis equal
end